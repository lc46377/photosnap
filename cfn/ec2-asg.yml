AWSTemplateFormatVersion: "2010-09-09"
Description: "PhotoSnap Flask API on EC2 AutoScaling Group"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  AmiId:
    Type: AWS::EC2::Image::Id
  InstanceType:
    Type: String
    Default: t2.micro
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  SnapsBucket:
    Type: String
  DbEndpoint:
    Type: String
  DbUsername:
    Type: String
  DbPassword:
    Type: String
  AwsRegion:
    Type: String
    Default: us-east-1

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref InstanceRole]

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile: { Name: !Ref InstanceProfile }
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref AsgSecurityGroup
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e

            # 1) Enable Python 3.8 & PostgreSQL 14 client
            amazon-linux-extras enable python3.8 postgresql14
            yum clean metadata -y

            # 2) Install system packages
            yum install -y git python3.8 postgresql

            # 3) Create & activate a virtualenv
            cd /home/ec2-user
            python3.8 -m venv venv
            source venv/bin/activate

            # 4) Clone your backend & install Python deps
            git clone https://github.com/lc46377/photosnap.git
            cd photosnap/backend

            # Upgrade pip, then install exactly your requirements
            pip install --upgrade pip
            pip install -r requirements.txt

            # 5) Bootstrap your database schema (snaps + auth + friendships)
            psql "host=${DbEndpoint} port=5432 user=${DbUsername} password=${DbPassword} dbname=postgres sslmode=require" <<EOSQL
            CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

            CREATE TABLE IF NOT EXISTS users (
              id            UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
              username      TEXT UNIQUE NOT NULL,
              password_hash TEXT NOT NULL,
              created_at    TIMESTAMP WITH TIME ZONE DEFAULT now()
            );

            CREATE TABLE IF NOT EXISTS friend_requests (
              id          UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
              from_user   UUID REFERENCES users(id) ON DELETE CASCADE,
              to_user     UUID REFERENCES users(id) ON DELETE CASCADE,
              status      TEXT     NOT NULL,  -- e.g. "pending","accepted","rejected"
              created_at  TIMESTAMP WITH TIME ZONE DEFAULT now()
            );

            CREATE TABLE IF NOT EXISTS friendships (
              user_id    UUID REFERENCES users(id) ON DELETE CASCADE,
              friend_id  UUID REFERENCES users(id) ON DELETE CASCADE,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
              PRIMARY KEY(user_id, friend_id)
            );

            CREATE TABLE IF NOT EXISTS snaps (
              id       UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
              s3_key   TEXT NOT NULL,
              owner    UUID REFERENCES users(id) ON DELETE CASCADE,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
            );

            CREATE TABLE IF NOT EXISTS snap_recipients (
              snap_id    UUID REFERENCES snaps(id) ON DELETE CASCADE,
              user_id    UUID REFERENCES users(id) ON DELETE CASCADE,
              viewed     BOOLEAN DEFAULT false,
              created_at TIMESTAMPTZ DEFAULT now(),
              PRIMARY KEY(snap_id, user_id)
            );
            EOSQL

            # 6) Export runtime env‑vars
            export SNAPS_BUCKET=${SnapsBucket}
            export DB_ENDPOINT=${DbEndpoint}
            export DB_USERNAME=${DbUsername}
            export DB_PASSWORD=${DbPassword}
            export AWS_REGION=${AwsRegion}

            # 7) Launch your Flask app under Gunicorn
            nohup /home/ec2-user/venv/bin/gunicorn app:app --bind 0.0.0.0:5000 &


  AsgSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP from ALB"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !GetAtt AlbSecurityGroup.GroupId

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP from Internet"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref PublicSubnetIds
      SecurityGroups: [!Ref AlbSecurityGroup]

  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 5000
      Protocol: HTTP
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: "5000"
      HealthCheckPath: "/"

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      TargetGroupARNs: [!Ref AlbTargetGroup]

Outputs:
  SecurityGroupId:
    Description: "SG for EC2 instances"
    Value: !Ref AsgSecurityGroup
  LoadBalancerDNS:
    Description: "URL of the Application Load Balancer"
    Value: !GetAtt AppALB.DNSName
