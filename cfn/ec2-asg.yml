AWSTemplateFormatVersion: "2010-09-09"
Description: "PhotoSnap Flask API on EC2 AutoScaling Group"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  AmiId:
    Type: AWS::EC2::Image::Id
  InstanceType:
    Type: String
    Default: t2.micro
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  SnapsBucket:
    Type: String
  DbEndpoint:
    Type: String
  DbUsername:
    Type: String
  DbPassword:
    Type: String
  AwsRegion:
    Type: String
    Default: us-east-1

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref InstanceRole]

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile: { Name: !Ref InstanceProfile }
        KeyName: !Ref KeyName
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            # Ensure we're on Amazon Linux 2
            yum update -y

            # Install git, python3, pip via yum
            yum install -y git python3 python3-pip

            # Switch to ec2‑user's home
            cd /home/ec2-user

            # Clone your GitHub repo
            git clone https://github.com/lc46377/photosnap.git
            cd photosnap/backend

            # Install Python dependencies
            pip3 install --upgrade pip
            pip3 install -r requirements.txt

            # Export env vars for Flask
            export SNAPS_BUCKET=${SnapsBucket}
            export DB_ENDPOINT=${DbEndpoint}
            export DB_USERNAME=${DbUsername}
            export DB_PASSWORD=${DbPassword}
            export AWS_REGION=${AwsRegion}

            # Launch Gunicorn
            nohup gunicorn app:app --bind 0.0.0.0:5000 &

  AsgSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP from ALB"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !GetAtt AlbSecurityGroup.GroupId

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP from Internet"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref PublicSubnetIds
      SecurityGroups: [!Ref AlbSecurityGroup]

  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 5000
      Protocol: HTTP
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: "5000"
      HealthCheckPath: "/"

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      TargetGroupARNs: [!Ref AlbTargetGroup]

Outputs:
  SecurityGroupId:
    Description: "SG for EC2 instances"
    Value: !Ref AsgSecurityGroup
  LoadBalancerDNS:
    Description: "URL of the Application Load Balancer"
    Value: !GetAtt AppALB.DNSName
